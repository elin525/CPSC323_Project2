Token: Separator      Lexeme: $$
<Rat25S> -> $$ <Opt Function Definitions> $$ <Opt Declaration List> $$ <Statement List> $$
Token: Keyword        Lexeme: function
<Opt Function Definitions> -> <Function Definitions> | <Empty>
<Function Definitions> -> <Function> <Function Definitions Prime>
<Function> -> function <Identifier> ( <Opt Parameter List> ) <Opt Declaration List> <Body>
Token: Identifier     Lexeme: findMinValue
Token: Separator      Lexeme: (
Token: Identifier     Lexeme: val1
<Opt Parameter List> -> <Parameter List> | <Empty>
<Parameter List> -> <Parameter> <Parameter List Prime
<Parameter> -> <IDs> <Qualifier>
<IDs> -> <Identifier> <IDs Prime>
Token: Keyword        Lexeme: integer
<IDs Prime> -> , <IDs> | ε
<Empty>
<Qualifier> -> integer | boolean | real
Token: Separator      Lexeme: ,
<Parameter List Prime> -> , <Parameter List> | ε
Token: Identifier     Lexeme: val2
<Parameter List> -> <Parameter> <Parameter List Prime
<Parameter> -> <IDs> <Qualifier>
<IDs> -> <Identifier> <IDs Prime>
Token: Keyword        Lexeme: integer
<IDs Prime> -> , <IDs> | ε
<Empty>
<Qualifier> -> integer | boolean | real
Token: Separator      Lexeme: )
<Parameter List Prime> -> , <Parameter List> | ε
<Empty>
Token: Separator      Lexeme: {
<Opt Declaration List> -> <Declaration List> | <Empty>
<Empty>
<Body> -> { <Statement List> }
Token: Keyword        Lexeme: if
<Statement List> -> <Statement> <Statement List Prime>
<Statement> -> <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
<If> -> if ( <Condition> ) <Statement> <If Prime>
Token: Separator      Lexeme: (
Token: Identifier     Lexeme: val1
<Condition> -> <Expression> <Relop> <Expression>
<Expression> -> <Term> <ExpressionPrime>
<Term> -> <Factor> <TermPrime>
<Factor> -> <Factor Prime> <Primary>
<Factor Prime> -> ε
<Primary> -> Identifier | Integer | Identifier ( <IDs> ) | Real | ( <Expression> ) | true | false
Token: Operator       Lexeme: <
<TermPrime> -> ε
<ExpressionPrime> -> ε
<Relop> -> == | != | > | < | <= | >=
Token: Identifier     Lexeme: val2
<Expression> -> <Term> <ExpressionPrime>
<Term> -> <Factor> <TermPrime>
<Factor> -> <Factor Prime> <Primary>
<Factor Prime> -> ε
<Primary> -> Identifier | Integer | Identifier ( <IDs> ) | Real | ( <Expression> ) | true | false
Token: Separator      Lexeme: )
<TermPrime> -> ε
<ExpressionPrime> -> ε
Token: Separator      Lexeme: {
<Statement> -> <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
<Compound> -> { <Statement List> }
Token: Keyword        Lexeme: return
<Statement List> -> <Statement> <Statement List Prime>
<Statement> -> <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
<Return> -> return <Return Prime>
Token: Identifier     Lexeme: val1
<Return Prime> -> <Expression> ; | ;
<Expression> -> <Term> <ExpressionPrime>
<Term> -> <Factor> <TermPrime>
<Factor> -> <Factor Prime> <Primary>
<Factor Prime> -> ε
<Primary> -> Identifier | Integer | Identifier ( <IDs> ) | Real | ( <Expression> ) | true | false
Token: Separator      Lexeme: ;
<TermPrime> -> ε
<ExpressionPrime> -> ε
Token: Separator      Lexeme: }
<Statement List Prime> -> <Statement List> | ε
<Empty>
Token: Keyword        Lexeme: else
<If Prime> -> else <Statement> endif | endif
Token: Separator      Lexeme: {
<Statement> -> <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
<Compound> -> { <Statement List> }
Token: Keyword        Lexeme: return
<Statement List> -> <Statement> <Statement List Prime>
<Statement> -> <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
<Return> -> return <Return Prime>
Token: Identifier     Lexeme: val2
<Return Prime> -> <Expression> ; | ;
<Expression> -> <Term> <ExpressionPrime>
<Term> -> <Factor> <TermPrime>
<Factor> -> <Factor Prime> <Primary>
<Factor Prime> -> ε
<Primary> -> Identifier | Integer | Identifier ( <IDs> ) | Real | ( <Expression> ) | true | false
Token: Separator      Lexeme: ;
<TermPrime> -> ε
<ExpressionPrime> -> ε
Token: Separator      Lexeme: }
<Statement List Prime> -> <Statement List> | ε
<Empty>
Token: Keyword        Lexeme: endif
Token: Separator      Lexeme: }
<Statement List Prime> -> <Statement List> | ε
<Empty>
Token: Keyword        Lexeme: function
<Function Definitions Prime> -> <Function> | ε
<Function> -> function <Identifier> ( <Opt Parameter List> ) <Opt Declaration List> <Body>
Token: Identifier     Lexeme: calcPower
Token: Separator      Lexeme: (
Token: Identifier     Lexeme: base
<Opt Parameter List> -> <Parameter List> | <Empty>
<Parameter List> -> <Parameter> <Parameter List Prime
<Parameter> -> <IDs> <Qualifier>
<IDs> -> <Identifier> <IDs Prime>
Token: Keyword        Lexeme: real
<IDs Prime> -> , <IDs> | ε
<Empty>
<Qualifier> -> integer | boolean | real
Token: Separator      Lexeme: ,
<Parameter List Prime> -> , <Parameter List> | ε
Token: Identifier     Lexeme: exponent
<Parameter List> -> <Parameter> <Parameter List Prime
<Parameter> -> <IDs> <Qualifier>
<IDs> -> <Identifier> <IDs Prime>
Token: Keyword        Lexeme: real
<IDs Prime> -> , <IDs> | ε
<Empty>
<Qualifier> -> integer | boolean | real
Token: Separator      Lexeme: )
<Parameter List Prime> -> , <Parameter List> | ε
<Empty>
Token: Keyword        Lexeme: integer
<Opt Declaration List> -> <Declaration List> | <Empty>
<Declaration List> -> <Declaration> ; <Declaration List Prime>
<Declaration> -> <Qualifier> <IDs>
<Qualifier> -> integer | boolean | real
Token: Identifier     Lexeme: iterator
<IDs> -> <Identifier> <IDs Prime>
Token: Separator      Lexeme: ;
<IDs Prime> -> , <IDs> | ε
<Empty>
Token: Keyword        Lexeme: real
<Declaration List Prime> -> <Declaration List> | ε
<Declaration List> -> <Declaration> ; <Declaration List Prime>
<Declaration> -> <Qualifier> <IDs>
<Qualifier> -> integer | boolean | real
Token: Identifier     Lexeme: product
<IDs> -> <Identifier> <IDs Prime>
Token: Separator      Lexeme: ;
<IDs Prime> -> , <IDs> | ε
<Empty>
Token: Separator      Lexeme: {
<Declaration List Prime> -> <Declaration List> | ε
<Empty>
<Body> -> { <Statement List> }
Token: Identifier     Lexeme: iterator
<Statement List> -> <Statement> <Statement List Prime>
<Statement> -> <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
<Assign> -> <Identifier> = <Expression> ;
Token: Operator       Lexeme: =
Token: Integer        Lexeme: 1
<Expression> -> <Term> <ExpressionPrime>
<Term> -> <Factor> <TermPrime>
<Factor> -> <Factor Prime> <Primary>
<Factor Prime> -> ε
<Primary> -> Identifier | Integer | Identifier ( <IDs> ) | Real | ( <Expression> ) | true | false
Token: Separator      Lexeme: ;
<TermPrime> -> ε
<ExpressionPrime> -> ε
Token: Keyword        Lexeme: while
<Statement List Prime> -> <Statement List> | ε
<Statement List> -> <Statement> <Statement List Prime>
<Statement> -> <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
<While> -> while ( <Condition> ) <Statement> endwhile
Token: Separator      Lexeme: (
Token: Identifier     Lexeme: iterator
<Condition> -> <Expression> <Relop> <Expression>
<Expression> -> <Term> <ExpressionPrime>
<Term> -> <Factor> <TermPrime>
<Factor> -> <Factor Prime> <Primary>
<Factor Prime> -> ε
<Primary> -> Identifier | Integer | Identifier ( <IDs> ) | Real | ( <Expression> ) | true | false
Token: Operator       Lexeme: <=
<TermPrime> -> ε
<ExpressionPrime> -> ε
<Relop> -> == | != | > | < | <= | >=
Token: Identifier     Lexeme: exponent
<Expression> -> <Term> <ExpressionPrime>
<Term> -> <Factor> <TermPrime>
<Factor> -> <Factor Prime> <Primary>
<Factor Prime> -> ε
<Primary> -> Identifier | Integer | Identifier ( <IDs> ) | Real | ( <Expression> ) | true | false
Token: Separator      Lexeme: )
<TermPrime> -> ε
<ExpressionPrime> -> ε
Token: Separator      Lexeme: {
<Statement> -> <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
<Compound> -> { <Statement List> }
Token: Identifier     Lexeme: product
<Statement List> -> <Statement> <Statement List Prime>
<Statement> -> <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
<Assign> -> <Identifier> = <Expression> ;
Token: Operator       Lexeme: =
Token: Identifier     Lexeme: product
<Expression> -> <Term> <ExpressionPrime>
<Term> -> <Factor> <TermPrime>
<Factor> -> <Factor Prime> <Primary>
<Factor Prime> -> ε
<Primary> -> Identifier | Integer | Identifier ( <IDs> ) | Real | ( <Expression> ) | true | false
Token: Operator       Lexeme: *
<TermPrime> -> * <Factor> <TermPrime>
Token: Identifier     Lexeme: base
<Factor> -> <Factor Prime> <Primary>
<Factor Prime> -> ε
<Primary> -> Identifier | Integer | Identifier ( <IDs> ) | Real | ( <Expression> ) | true | false
Token: Separator      Lexeme: ;
<TermPrime> -> ε
<ExpressionPrime> -> ε
Token: Separator      Lexeme: }
<Statement List Prime> -> <Statement List> | ε
<Empty>
Token: Keyword        Lexeme: endwhile
Token: Keyword        Lexeme: return
<Statement List Prime> -> <Statement List> | ε
<Statement List> -> <Statement> <Statement List Prime>
<Statement> -> <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
<Return> -> return <Return Prime>
Token: Identifier     Lexeme: product
<Return Prime> -> <Expression> ; | ;
<Expression> -> <Term> <ExpressionPrime>
<Term> -> <Factor> <TermPrime>
<Factor> -> <Factor Prime> <Primary>
<Factor Prime> -> ε
<Primary> -> Identifier | Integer | Identifier ( <IDs> ) | Real | ( <Expression> ) | true | false
Token: Separator      Lexeme: ;
<TermPrime> -> ε
<ExpressionPrime> -> ε
Token: Separator      Lexeme: }
<Statement List Prime> -> <Statement List> | ε
<Empty>
Token: Separator      Lexeme: $$
Token: Keyword        Lexeme: integer
<Opt Declaration List> -> <Declaration List> | <Empty>
<Declaration List> -> <Declaration> ; <Declaration List Prime>
<Declaration> -> <Qualifier> <IDs>
<Qualifier> -> integer | boolean | real
Token: Identifier     Lexeme: value1
<IDs> -> <Identifier> <IDs Prime>
Token: Separator      Lexeme: ,
<IDs Prime> -> , <IDs> | ε
Token: Identifier     Lexeme: value2
<IDs> -> <Identifier> <IDs Prime>
Token: Separator      Lexeme: ,
<IDs Prime> -> , <IDs> | ε
Token: Identifier     Lexeme: min
<IDs> -> <Identifier> <IDs Prime>
Token: Separator      Lexeme: ;
<IDs Prime> -> , <IDs> | ε
<Empty>
Token: Keyword        Lexeme: real
<Declaration List Prime> -> <Declaration List> | ε
<Declaration List> -> <Declaration> ; <Declaration List Prime>
<Declaration> -> <Qualifier> <IDs>
<Qualifier> -> integer | boolean | real
Token: Identifier     Lexeme: base
<IDs> -> <Identifier> <IDs Prime>
Token: Separator      Lexeme: ,
<IDs Prime> -> , <IDs> | ε
Token: Identifier     Lexeme: exponent
<IDs> -> <Identifier> <IDs Prime>
Token: Separator      Lexeme: ,
<IDs Prime> -> , <IDs> | ε
Token: Identifier     Lexeme: product
<IDs> -> <Identifier> <IDs Prime>
Token: Separator      Lexeme: ;
<IDs Prime> -> , <IDs> | ε
<Empty>
Token: Separator      Lexeme: $$
<Declaration List Prime> -> <Declaration List> | ε
<Empty>
Token: Keyword        Lexeme: scan
<Statement List> -> <Statement> <Statement List Prime>
<Statement> -> <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
<Scan> -> scan ( <IDs> );
Token: Separator      Lexeme: (
Token: Identifier     Lexeme: value1
<IDs> -> <Identifier> <IDs Prime>
Token: Separator      Lexeme: ,
<IDs Prime> -> , <IDs> | ε
Token: Identifier     Lexeme: value2
<IDs> -> <Identifier> <IDs Prime>
Token: Separator      Lexeme: ,
<IDs Prime> -> , <IDs> | ε
Token: Identifier     Lexeme: min
<IDs> -> <Identifier> <IDs Prime>
Token: Separator      Lexeme: )
<IDs Prime> -> , <IDs> | ε
<Empty>
Token: Separator      Lexeme: ;
Token: Keyword        Lexeme: scan
<Statement List Prime> -> <Statement List> | ε
<Statement List> -> <Statement> <Statement List Prime>
<Statement> -> <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
<Scan> -> scan ( <IDs> );
Token: Separator      Lexeme: (
Token: Identifier     Lexeme: base
<IDs> -> <Identifier> <IDs Prime>
Token: Separator      Lexeme: ,
<IDs Prime> -> , <IDs> | ε
Token: Identifier     Lexeme: exponent
<IDs> -> <Identifier> <IDs Prime>
Token: Separator      Lexeme: ,
<IDs Prime> -> , <IDs> | ε
Token: Identifier     Lexeme: product
<IDs> -> <Identifier> <IDs Prime>
Token: Separator      Lexeme: )
<IDs Prime> -> , <IDs> | ε
<Empty>
Token: Separator      Lexeme: ;
Token: Identifier     Lexeme: min
<Statement List Prime> -> <Statement List> | ε
<Statement List> -> <Statement> <Statement List Prime>
<Statement> -> <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
<Assign> -> <Identifier> = <Expression> ;
Token: Operator       Lexeme: =
Token: Identifier     Lexeme: findMinValue
<Expression> -> <Term> <ExpressionPrime>
<Term> -> <Factor> <TermPrime>
<Factor> -> <Factor Prime> <Primary>
<Factor Prime> -> ε
<Primary> -> Identifier | Integer | Identifier ( <IDs> ) | Real | ( <Expression> ) | true | false
Token: Separator      Lexeme: (
Token: Identifier     Lexeme: value1
<IDs> -> <Identifier> <IDs Prime>
Token: Separator      Lexeme: ,
<IDs Prime> -> , <IDs> | ε
Token: Identifier     Lexeme: value2
<IDs> -> <Identifier> <IDs Prime>
Token: Separator      Lexeme: )
<IDs Prime> -> , <IDs> | ε
<Empty>
Token: Separator      Lexeme: ;
<TermPrime> -> ε
<ExpressionPrime> -> ε
Token: Keyword        Lexeme: print
<Statement List Prime> -> <Statement List> | ε
<Statement List> -> <Statement> <Statement List Prime>
<Statement> -> <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
<Print> -> print ( <Expression> );
Token: Separator      Lexeme: (
Token: Identifier     Lexeme: min
<Expression> -> <Term> <ExpressionPrime>
<Term> -> <Factor> <TermPrime>
<Factor> -> <Factor Prime> <Primary>
<Factor Prime> -> ε
<Primary> -> Identifier | Integer | Identifier ( <IDs> ) | Real | ( <Expression> ) | true | false
Token: Separator      Lexeme: )
<TermPrime> -> ε
<ExpressionPrime> -> ε
Token: Separator      Lexeme: ;
Token: Identifier     Lexeme: product
<Statement List Prime> -> <Statement List> | ε
<Statement List> -> <Statement> <Statement List Prime>
<Statement> -> <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
<Assign> -> <Identifier> = <Expression> ;
Token: Operator       Lexeme: =
Token: Identifier     Lexeme: calcPower
<Expression> -> <Term> <ExpressionPrime>
<Term> -> <Factor> <TermPrime>
<Factor> -> <Factor Prime> <Primary>
<Factor Prime> -> ε
<Primary> -> Identifier | Integer | Identifier ( <IDs> ) | Real | ( <Expression> ) | true | false
Token: Separator      Lexeme: (
Token: Identifier     Lexeme: base
<IDs> -> <Identifier> <IDs Prime>
Token: Separator      Lexeme: ,
<IDs Prime> -> , <IDs> | ε
Token: Identifier     Lexeme: exponent
<IDs> -> <Identifier> <IDs Prime>
Token: Separator      Lexeme: )
<IDs Prime> -> , <IDs> | ε
<Empty>
Token: Separator      Lexeme: ;
<TermPrime> -> ε
<ExpressionPrime> -> ε
Token: Keyword        Lexeme: print
<Statement List Prime> -> <Statement List> | ε
<Statement List> -> <Statement> <Statement List Prime>
<Statement> -> <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
<Print> -> print ( <Expression> );
Token: Separator      Lexeme: (
Token: Identifier     Lexeme: product
<Expression> -> <Term> <ExpressionPrime>
<Term> -> <Factor> <TermPrime>
<Factor> -> <Factor Prime> <Primary>
<Factor Prime> -> ε
<Primary> -> Identifier | Integer | Identifier ( <IDs> ) | Real | ( <Expression> ) | true | false
Token: Separator      Lexeme: )
<TermPrime> -> ε
<ExpressionPrime> -> ε
Token: Separator      Lexeme: ;
Token: Separator      Lexeme: $$
<Statement List Prime> -> <Statement List> | ε
<Empty>
Token: EOF            Lexeme: EOF
Parsing completed successfully!
